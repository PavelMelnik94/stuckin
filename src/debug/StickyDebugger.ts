/**
 * –°–∏—Å—Ç–µ–º–∞ –æ—Ç–ª–∞–¥–∫–∏ –¥–ª—è sticky –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
 * –ü—Ä–∏–Ω—Ü–∏–ø—ã:
 * - SRP: –æ—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∑–∞ debugging —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
 * - Information Expert: —É–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
 * - Encapsulation: –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º—ã–π –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ –≥–µ—Ç—Ç–µ—Ä—ã
 * - Type Safety: —Å—Ç—Ä–æ–≥–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
 */

import { makeObservable, observable, action, computed } from 'mobx';

import { performanceMonitor } from '../utils/performance';
import { ENV, envLog } from '../utils/env';

// === –°–¢–†–û–ì–û –¢–ò–ü–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –ò–ù–¢–ï–†–§–ï–ô–°–´ ===

/**
 * –£—Ä–æ–≤–Ω–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (—Å—Ç—Ä–æ–≥–æ —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω—ã)
 * –ü—Ä–∏–Ω—Ü–∏–ø: —è–≤–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
 */
export type DebugLogLevel = 'error' | 'warn' | 'info' | 'debug';

/**
 * –¢–∏–ø—ã —Å–æ–±—ã—Ç–∏–π –æ—Ç–ª–∞–¥–∫–∏ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∏ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω—ã–µ)
 * –ü—Ä–∏–Ω—Ü–∏–ø Open/Closed: –ª–µ–≥–∫–æ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ —Ç–∏–ø—ã
 */
export type DebugEventType =
  | 'error'
  | 'warning'
  | 'info'          // ‚Üê –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–π —Ç–∏–ø
  | 'debug'         // ‚Üê –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–π —Ç–∏–ø
  | 'state-change'
  | 'config-update'
  | 'registration'
  | 'unregistration';

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–æ–±—ã—Ç–∏—è –æ—Ç–ª–∞–¥–∫–∏
 * –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: stack –º–æ–∂–µ—Ç –±—ã—Ç—å undefined —Å —É—á–µ—Ç–æ–º exactOptionalPropertyTypes
 */
export interface DebugEvent {
  id: string;
  timestamp: number;
  type: DebugEventType;
  elementId: string;
  data: any;
  stack?: string | undefined; // ‚Üê –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º undefined
}

/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ—Ç–ª–∞–¥–∫–∏
 * –û–±–Ω–æ–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º DebugLogLevel
 */
export interface DebugConfig {
  enabled: boolean;
  logLevel: DebugLogLevel; // ‚Üê –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–≥–æ —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
  maxHistorySize: number;
  visualDebug: boolean;
  performanceTracking: boolean;
  autoCapture: boolean;
}

/**
 * –°–Ω–∏–º–æ–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—Ç–ª–∞–¥–∫–∏
 */
export interface DebugSnapshot {
  timestamp: number;
  elements: Record<string, any>;
  groups: Record<string, any>;
  viewport: {
    width: number;
    height: number;
    scrollX: number;
    scrollY: number;
  };
  performance: any[];
}

/**
 * –¢–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 * –ü—Ä–∏–Ω—Ü–∏–ø: —è–≤–Ω–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
 */
export interface PerformanceAnalysis {
  summary: {
    totalElements: number;
    avgRenderTime: number;
    maxRenderTime: number;
    totalRecomputations: number;
    slowElementsCount: number;
    activeElementsCount: number;
  } | null;
  slowElements?: Array<{
    id: string;
    renderTime: number;
    recomputations: number;
  }>;
  recommendations?: string[];
}

/**
 * –í–∏–∑—É–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –æ—Ç–ª–∞–¥–∫–∏
 * –ü—Ä–∏–Ω—Ü–∏–ø: —è–≤–Ω–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è –¥–ª—è visual debug —ç–ª–µ–º–µ–Ω—Ç–æ–≤
 */
interface VisualDebugElement {
  element: HTMLElement;
  overlay?: HTMLElement;
  lastUpdate: number;
  isActive: boolean;
}

class StickyDebugger {
  @observable private config: DebugConfig = {
    enabled: false,
    logLevel: 'info',
    maxHistorySize: 1000,
    visualDebug: false,
    performanceTracking: true,
    autoCapture: false
  };

  @observable private events: DebugEvent[] = [];
  @observable private snapshots: DebugSnapshot[] = [];

  // ‚Üê –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–π –æ—Ç–ª–∞–¥–∫–∏
  @observable private visualElements = new Map<string, VisualDebugElement>();

  private eventCounter = 0;
  private visualOverlay: HTMLElement | null = null;

  /**
   * –ö–∞—Ä—Ç–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ —É—Ä–æ–≤–Ω–µ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
   * –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –ø–æ–ª–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–∏–ø–∞–º
   */
  private readonly LOG_LEVEL_PRIORITY: Record<DebugLogLevel, number> = {
    'error': 4,
    'warn': 3,    // ‚Üê –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: warn –≤–º–µ—Å—Ç–æ warning
    'info': 2,
    'debug': 1
  } as const;

  constructor() {
    makeObservable(this);

    // –í–∫–ª—é—á–∞–µ–º –æ—Ç–ª–∞–¥–∫—É —Ç–æ–ª—å–∫–æ –≤ development
    if (ENV.isDevelopment) {
      this.enable();
      this.setupGlobalAPI();
    }
  }

  // === –ü–£–ë–õ–ò–ß–ù–´–ï –ì–ï–¢–¢–ï–†–´ ===
  // –ü—Ä–∏–Ω—Ü–∏–ø Encapsulation: –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º—ã–π –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–≤–∞—Ç–Ω—ã–º –¥–∞–Ω–Ω—ã–º

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ—Ç–ª–∞–¥–∫–∏ (readonly)
   */
  @computed
  get debugConfig(): Readonly<DebugConfig> {
    return Object.freeze({ ...this.config });
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π (readonly)
   */
  @computed
  get allEvents(): readonly DebugEvent[] {
    return Object.freeze([...this.events]);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–Ω–∏–º–∫–æ–≤ (readonly)
   */
  @computed
  get allSnapshots(): readonly DebugSnapshot[] {
    return Object.freeze([...this.snapshots]);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –ø–æ —É—Ä–æ–≤–Ω—é –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
   * –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º
   */
  @computed
  get filteredEvents(): readonly DebugEvent[] {
    const filtered = this.events.filter(event => {
      const configPriority = this.LOG_LEVEL_PRIORITY[this.config.logLevel];

      // –ú–∞–ø–ø–∏–Ω–≥ event types –Ω–∞ log levels –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
      const eventToLogLevel: Record<DebugEventType, DebugLogLevel> = {
        'error': 'error',
        'warning': 'warn',
        'info': 'info',
        'debug': 'debug',
        'state-change': 'info',
        'config-update': 'info',
        'registration': 'debug',
        'unregistration': 'debug'
      };

      const eventLogLevel = eventToLogLevel[event.type];
      const eventPriority = this.LOG_LEVEL_PRIORITY[eventLogLevel];

      return eventPriority >= configPriority;
    });

    return Object.freeze(filtered);
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (computed –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è)
   * –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —Å—Ç—Ä–æ–≥–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
   */
  @computed
  get performanceAnalysis(): PerformanceAnalysis {
    const metrics = performanceMonitor.getAllMetrics();

    if (metrics.length === 0) {
      return {
        summary: null,
        slowElements: [],
        recommendations: ['–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏']
      };
    }

    const avgRenderTime = metrics.reduce((sum, m) => sum + m.renderTime, 0) / metrics.length;
    const maxRenderTime = Math.max(...metrics.map(m => m.renderTime));
    const totalRecomputations = metrics.reduce((sum, m) => sum + m.recomputations, 0);

    const slowElements = metrics.filter(m => m.renderTime > 16); // > 60fps
    const activeElements = metrics.filter(m => m.recomputations > 0);

    return {
      summary: {
        totalElements: metrics.length,
        avgRenderTime: Math.round(avgRenderTime * 100) / 100,
        maxRenderTime: Math.round(maxRenderTime * 100) / 100,
        totalRecomputations,
        slowElementsCount: slowElements.length,
        activeElementsCount: activeElements.length
      },
      slowElements: slowElements.map(m => ({
        id: m.elementId,
        renderTime: m.renderTime,
        recomputations: m.recomputations
      })),
      recommendations: this.generatePerformanceRecommendations(metrics)
    };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∫–ª—é—á–µ–Ω–Ω–æ—Å—Ç–∏ –æ—Ç–ª–∞–¥–∫–∏
   */
  @computed
  get isEnabled(): boolean {
    return this.config.enabled;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
   * –ü—Ä–∏–Ω—Ü–∏–ø Information Expert: –∫–ª–∞—Å—Å –∑–Ω–∞–µ—Ç –æ —Å–≤–æ–∏—Ö –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö
   */
  @computed
  get visualElementsStats() {
    return {
      total: this.visualElements.size,
      active: Array.from(this.visualElements.values()).filter(el => el.isActive).length
    };
  }

  // === –ü–£–ë–õ–ò–ß–ù–´–ï –ú–ï–¢–û–î–´ ===

  /**
   * –í–∫–ª—é—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –æ—Ç–ª–∞–¥–∫–∏
   */
  @action
  enable(config: Partial<DebugConfig> = {}): void {
    this.config = { ...this.config, enabled: true, ...config };

    if (this.config.visualDebug) {
      this.createVisualOverlay();
    }

    if (this.config.performanceTracking) {
      performanceMonitor.enable();
    }

    // ‚Üê –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è
    this.log('info', 'debug-system', '–°–∏—Å—Ç–µ–º–∞ –æ—Ç–ª–∞–¥–∫–∏ –≤–∫–ª—é—á–µ–Ω–∞', this.config);
  }

  /**
   * –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –æ—Ç–ª–∞–¥–∫–∏
   */
  @action
  disable(): void {
    this.config.enabled = false;
    this.removeVisualOverlay();
    this.clearVisualElements();
    performanceMonitor.disable();
    this.events.length = 0;
    this.snapshots.length = 0;

    envLog.dev('üîß –°–∏—Å—Ç–µ–º–∞ –æ—Ç–ª–∞–¥–∫–∏ sticky –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∞');
  }

  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
   * –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è –∏ handling stack
   */
  @action
  log(
    level: DebugEventType, // ‚Üê –ò—Å–ø–æ–ª—å–∑—É–µ–º DebugEventType –≤–º–µ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∏
    elementId: string,
    message: string,
    data?: any
  ): void {
    if (!this.config.enabled) return;

    // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ stack —Å —É—á–µ—Ç–æ–º exactOptionalPropertyTypes
    const stack = this.config.logLevel === 'debug' ? new Error().stack : undefined;

    const event: DebugEvent = {
      id: `debug-${++this.eventCounter}`,
      timestamp: Date.now(),
      type: level,
      elementId,
      data: { message, ...data },
      ...(stack && { stack }) // ‚Üê –£—Å–ª–æ–≤–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ stack —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    };

    this.events.push(event);

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
    if (this.events.length > this.config.maxHistorySize) {
      this.events.shift();
    }

    // –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
    this.logToConsole(event);

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é –æ—Ç–ª–∞–¥–∫—É
    if (this.config.visualDebug) {
      this.updateVisualDebug(elementId, event);
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ —Å–Ω–∏–º–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
   */
  @action
  captureSnapshot(label?: string): DebugSnapshot {
    const snapshot: DebugSnapshot = {
      timestamp: Date.now(),
      elements: this.serializeElements(),
      groups: this.serializeGroups(),
      viewport: this.getViewportInfo(),
      performance: performanceMonitor.getAllMetrics()
    };

    this.snapshots.push(snapshot);

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–Ω–∏–º–∫–æ–≤
    if (this.snapshots.length > 50) {
      this.snapshots.shift();
    }

    envLog.dev(`üì∏ –°–Ω–∏–º–æ–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è${label ? ` "${label}"` : ''} —Å–æ–∑–¥–∞–Ω`, snapshot);
    return snapshot;
  }

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
   * –ü—Ä–∏–Ω—Ü–∏–ø: —Ç–µ–ø–µ—Ä—å visualElements –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
   */
  @action
  registerVisualElement(elementId: string, element: HTMLElement): void {
    if (!this.config.visualDebug) return;

    this.visualElements.set(elementId, {
      element,
      lastUpdate: Date.now(),
      isActive: true
    });

    this.log('registration', elementId, '–í–∏–∑—É–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
   */
  @action
  unregisterVisualElement(elementId: string): void {
    const visualEl = this.visualElements.get(elementId);
    if (visualEl) {
      // –û—á–∏—â–∞–µ–º overlay –µ—Å–ª–∏ –µ—Å—Ç—å
      if (visualEl.overlay) {
        visualEl.overlay.remove();
      }

      this.visualElements.delete(elementId);
      this.log('unregistration', elementId, '–í–∏–∑—É–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç —É–¥–∞–ª–µ–Ω');
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ—Ç–ª–∞–¥–∫–∏
   */
  @action
  updateConfig(newConfig: Partial<DebugConfig>): void {
    const oldConfig = { ...this.config };
    this.config = { ...this.config, ...newConfig };

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é –æ—Ç–ª–∞–¥–∫—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    if (oldConfig.visualDebug !== this.config.visualDebug) {
      if (this.config.visualDebug) {
        this.createVisualOverlay();
      } else {
        this.removeVisualOverlay();
        this.clearVisualElements();
      }
    }

    this.log('config-update', 'debug-system', '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞', {
      oldConfig,
      newConfig: this.config
    });
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ç–ª–∞–¥–∫–∏
   */
  @action
  clearHistory(): void {
    this.events.length = 0;
    this.snapshots.length = 0;
    envLog.dev('üßπ –ò—Å—Ç–æ—Ä–∏—è –æ—Ç–ª–∞–¥–∫–∏ –æ—á–∏—â–µ–Ω–∞');
  }

  // === –ü–†–ò–í–ê–¢–ù–´–ï –ú–ï–¢–û–î–´ ===

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   */
  private generatePerformanceRecommendations(metrics: any[]): string[] {
    const recommendations: string[] = [];

    const slowElements = metrics.filter(m => m.renderTime > 16);
    if (slowElements.length > 0) {
      recommendations.push(
        `–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ —Ä–µ–Ω–¥–µ—Ä –º–µ–¥–ª–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${slowElements.map(m => m.elementId).join(', ')}`
      );
    }

    const activeElements = metrics.filter(m => m.recomputations > 30);
    if (activeElements.length > 0) {
      recommendations.push(
        `–£–º–µ–Ω—å—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ—Å—á–µ—Ç–æ–≤ –¥–ª—è: ${activeElements.map(m => m.elementId).join(', ')}`
      );
    }

    if (metrics.length > 20) {
      recommendations.push('–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–∏—Ä—Ç—É–∞–ª–∏–∑–∞—Ü–∏—é –ø—Ä–∏ –±–æ–ª—å—à–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ sticky —ç–ª–µ–º–µ–Ω—Ç–æ–≤');
    }

    return recommendations;
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ overlay –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
   */
  private createVisualOverlay(): void {
    if (this.visualOverlay || !ENV.isBrowser) return;

    this.visualOverlay = document.createElement('div');
    this.visualOverlay.setAttribute('data-sticky-debug', 'overlay');
    this.visualOverlay.style.cssText = `
      position: fixed;
      top: 10px;
      right: 10px;
      width: 300px;
      max-height: 400px;
      background: rgba(0, 0, 0, 0.9);
      color: white;
      font-family: 'Monaco', 'Menlo', monospace;
      font-size: 11px;
      padding: 10px;
      border-radius: 6px;
      z-index: 999999;
      overflow-y: auto;
      backdrop-filter: blur(10px);
      border: 1px solid rgba(255, 255, 255, 0.2);
    `;

    document.body.appendChild(this.visualOverlay);
    this.updateVisualOverlay();
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ overlay
   * –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –±–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å performance.summary
   */
  private updateVisualOverlay(): void {
    if (!this.visualOverlay) return;

    const recentEvents = this.events.slice(-10);
    const performance = this.performanceAnalysis;

    // ‚Üê –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ summary
    const summary = performance.summary;
    const hasSummary = summary !== null;

    this.visualOverlay.innerHTML = `
      <div style="margin-bottom: 8px; font-weight: bold; color: #4CAF50;">
        üîß Sticky Debug Panel
      </div>

      <div style="margin-bottom: 6px;">
        <strong>üìä Performance:</strong><br>
        Elements: ${hasSummary ? summary.totalElements : 0}<br>
        Avg Render: ${hasSummary ? summary.avgRenderTime : 0}ms<br>
        Slow: ${hasSummary ? summary.slowElementsCount : 0}<br>
        Visual Elements: ${this.visualElementsStats.total} (${this.visualElementsStats.active} active)
      </div>

      <div style="margin-bottom: 6px;">
        <strong>üìù Recent Events:</strong>
      </div>

      ${recentEvents.map(event => `
        <div style="margin-bottom: 2px; padding: 2px; background: rgba(255,255,255,0.1); border-radius: 2px;">
          <span style="color: ${this.getEventColor(event.type)}">${this.getEventIcon(event.type)}</span>
          <span style="color: #999">${new Date(event.timestamp).toLocaleTimeString()}</span><br>
          <span style="font-size: 10px;">${event.elementId}: ${event.data.message}</span>
        </div>
      `).join('')}
    `;
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ overlay
   */
  private removeVisualOverlay(): void {
    if (this.visualOverlay) {
      document.body.removeChild(this.visualOverlay);
      this.visualOverlay = null;
    }
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
   */
  private clearVisualElements(): void {
    this.visualElements.forEach((visualEl, _elementId) => {
      if (visualEl.overlay) {
        visualEl.overlay.remove();
      }
    });
    this.visualElements.clear();
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–π –æ—Ç–ª–∞–¥–∫–∏ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞
   */
  private updateVisualDebug(elementId: string, event: DebugEvent): void {
    this.updateVisualOverlay();

    // –†–∞–±–æ—Ç–∞–µ–º —Å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –≤–∏–∑—É–∞–ª—å–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
    const visualEl = this.visualElements.get(elementId);
    if (visualEl) {
      visualEl.lastUpdate = Date.now();

      if (event.type === 'error') {
        visualEl.element.style.outline = '2px solid red';
        setTimeout(() => {
          visualEl.element.style.outline = '';
        }, 2000);
      }
    }

    // Fallback: –ø–æ–∏—Å–∫ –ø–æ data-sticky-id
    const elements = document.querySelectorAll(`[data-sticky-id="${elementId}"]`);
    elements.forEach(el => {
      if (event.type === 'error') {
        (el as HTMLElement).style.outline = '2px solid red';
        setTimeout(() => {
          (el as HTMLElement).style.outline = '';
        }, 2000);
      }
    });
  }

  /**
   * –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å —Å –∫—Ä–∞—Å–∏–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
   */
  private logToConsole(event: DebugEvent): void {
    const icon = this.getEventIcon(event.type);
    const color = this.getEventColor(event.type);
    const time = new Date(event.timestamp).toLocaleTimeString();

    const message = `%c${icon} [${time}] ${event.elementId}: ${event.data.message}`;

    switch (event.type) {
      case 'error':
        console.error(message, `color: ${color}; font-weight: bold`, event.data);
        break;
      case 'warning':
        console.warn(message, `color: ${color}; font-weight: bold`, event.data);
        break;
      default:
        console.log(message, `color: ${color}`, event.data);
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ API –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
   */
  private setupGlobalAPI(): void {
    (window as any).__STICKY_DEBUG__ = {
      // –ú–µ—Ç–æ–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
      enable: (config?: Partial<DebugConfig>) => this.enable(config),
      disable: () => this.disable(),

      // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –≥–µ—Ç—Ç–µ—Ä—ã
      getEvents: () => this.allEvents,
      getSnapshots: () => this.allSnapshots,
      getPerformance: () => this.performanceAnalysis,
      getConfig: () => this.debugConfig,

      // –î–µ–π—Å—Ç–≤–∏—è
      captureSnapshot: (label?: string) => this.captureSnapshot(label),
      clearHistory: () => this.clearHistory(),
      updateConfig: (config: Partial<DebugConfig>) => this.updateConfig(config),

      // –í–∏–∑—É–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞
      registerVisualElement: (id: string, el: HTMLElement) => this.registerVisualElement(id, el),
      unregisterVisualElement: (id: string) => this.unregisterVisualElement(id),
      getVisualStats: () => this.visualElementsStats,

      // –£—Ç–∏–ª–∏—Ç—ã
      log: (level: DebugEventType, elementId: string, message: string, data?: any) =>
        this.log(level, elementId, message, data)
    };

    envLog.dev(
      '%cüîß Sticky Debug API –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ window.__STICKY_DEBUG__',
      'color: #4CAF50; font-weight: bold; font-size: 14px'
    );
  }

  /**
   * –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–Ω–∏–º–∫–æ–≤
   */
  private serializeElements(): Record<string, any> {
    const serialized: Record<string, any> = {};

    // –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    this.visualElements.forEach((visualEl, elementId) => {
      const rect = visualEl.element.getBoundingClientRect();
      serialized[elementId] = {
        isActive: visualEl.isActive,
        lastUpdate: visualEl.lastUpdate,
        bounds: {
          width: rect.width,
          height: rect.height,
          top: rect.top,
          left: rect.left
        },
        styles: {
          position: visualEl.element.style.position,
          zIndex: visualEl.element.style.zIndex
        }
      };
    });

    return serialized;
  }

  /**
   * –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä—É–ø–ø –¥–ª—è —Å–Ω–∏–º–∫–æ–≤
   */
  private serializeGroups(): Record<string, any> {
    // TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å StickyManager –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä—É–ø–ø
    return {};
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ viewport
   */
  private getViewportInfo() {
    if (!ENV.isBrowser) {
      return { width: 0, height: 0, scrollX: 0, scrollY: 0 };
    }

    return {
      width: window.innerWidth,
      height: window.innerHeight,
      scrollX: window.scrollX,
      scrollY: window.scrollY
    };
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
   */
  private getEventIcon(type: DebugEventType): string {
    const icons: Record<DebugEventType, string> = {
      'error': '‚ùå',
      'warning': '‚ö†Ô∏è',
      'info': '‚ÑπÔ∏è',
      'debug': 'üîç',
      'state-change': 'üîÑ',
      'config-update': '‚öôÔ∏è',
      'registration': 'üìù',
      'unregistration': 'üóëÔ∏è'
    };

    return icons[type] || 'üìå';
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
   */
  private getEventColor(type: DebugEventType): string {
    const colors: Record<DebugEventType, string> = {
      'error': '#f44336',
      'warning': '#ff9800',
      'info': '#2196f3',
      'debug': '#9e9e9e',
      'state-change': '#4caf50',
      'config-update': '#673ab7',
      'registration': '#009688',
      'unregistration': '#795548'
    };

    return colors[type] || '#000000';
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ—Ç–ª–∞–¥—á–∏–∫–∞
export const stickyDebugger = new StickyDebugger();
