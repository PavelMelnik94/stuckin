/**
 * –°–∏—Å—Ç–µ–º–∞ –æ—Ç–ª–∞–¥–∫–∏ –¥–ª—è sticky –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
 * –ü—Ä–∏–Ω—Ü–∏–ø SRP: –æ—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∑–∞ debugging —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
 */

import { makeObservable, observable, action, computed } from 'mobx';
import { StickyElement, StickyGroup, StickyState } from '../types/sticky.types';
import { performanceMonitor } from '../utils/performance';

export interface DebugEvent {
  id: string;
  timestamp: number;
  type: 'state-change' | 'config-update' | 'registration' | 'unregistration' | 'error' | 'warning';
  elementId: string;
  data: any;
  stack?: string;
}

export interface DebugConfig {
  enabled: boolean;
  logLevel: 'error' | 'warn' | 'info' | 'debug';
  maxHistorySize: number;
  visualDebug: boolean;
  performanceTracking: boolean;
  autoCapture: boolean;
}

export interface DebugSnapshot {
  timestamp: number;
  elements: Record<string, any>;
  groups: Record<string, any>;
  viewport: {
    width: number;
    height: number;
    scrollX: number;
    scrollY: number;
  };
  performance: any[];
}

class StickyDebugger {
  @observable private config: DebugConfig = {
    enabled: false,
    logLevel: 'info',
    maxHistorySize: 1000,
    visualDebug: false,
    performanceTracking: true,
    autoCapture: false
  };

  @observable private events: DebugEvent[] = [];
  @observable private snapshots: DebugSnapshot[] = [];
  @observable private visualElements = new Map<string, HTMLElement>();

  private eventCounter = 0;
  private visualOverlay: HTMLElement | null = null;

  constructor() {
    makeObservable(this);

    // –í–∫–ª—é—á–∞–µ–º –æ—Ç–ª–∞–¥–∫—É —Ç–æ–ª—å–∫–æ –≤ development
    if (process.env.NODE_ENV === 'development') {
      this.enable();
      this.setupGlobalAPI();
    }
  }

  /**
   * –í–∫–ª—é—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –æ—Ç–ª–∞–¥–∫–∏
   */
  @action
  enable(config: Partial<DebugConfig> = {}): void {
    this.config = { ...this.config, enabled: true, ...config };

    if (this.config.visualDebug) {
      this.createVisualOverlay();
    }

    if (this.config.performanceTracking) {
      performanceMonitor.enable();
    }

    this.log('info', 'debug-system', '–°–∏—Å—Ç–µ–º–∞ –æ—Ç–ª–∞–¥–∫–∏ –≤–∫–ª—é—á–µ–Ω–∞', this.config);
  }

  /**
   * –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –æ—Ç–ª–∞–¥–∫–∏
   */
  @action
  disable(): void {
    this.config.enabled = false;
    this.removeVisualOverlay();
    performanceMonitor.disable();
    this.events.length = 0;
    this.snapshots.length = 0;

    console.log('üîß –°–∏—Å—Ç–µ–º–∞ –æ—Ç–ª–∞–¥–∫–∏ sticky –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∞');
  }

  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
   */
  @action
  log(
    level: DebugEvent['type'],
    elementId: string,
    message: string,
    data?: any
  ): void {
    if (!this.config.enabled) return;

    const event: DebugEvent = {
      id: `debug-${++this.eventCounter}`,
      timestamp: Date.now(),
      type: level,
      elementId,
      data: { message, ...data },
      stack: this.config.logLevel === 'debug' ? new Error().stack : undefined
    };

    this.events.push(event);

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
    if (this.events.length > this.config.maxHistorySize) {
      this.events.shift();
    }

    // –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
    this.logToConsole(event);

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—É—é –æ—Ç–ª–∞–¥–∫—É
    if (this.config.visualDebug) {
      this.updateVisualDebug(elementId, event);
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ —Å–Ω–∏–º–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
   */
  @action
  captureSnapshot(label?: string): DebugSnapshot {
    const snapshot: DebugSnapshot = {
      timestamp: Date.now(),
      elements: this.serializeElements(),
      groups: this.serializeGroups(),
      viewport: this.getViewportInfo(),
      performance: performanceMonitor.getAllMetrics()
    };

    this.snapshots.push(snapshot);

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–Ω–∏–º–∫–æ–≤
    if (this.snapshots.length > 50) {
      this.snapshots.shift();
    }

    console.log(`üì∏ –°–Ω–∏–º–æ–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è${label ? ` "${label}"` : ''} —Å–æ–∑–¥–∞–Ω`, snapshot);
    return snapshot;
  }

  /**
   * –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–≤—É—Ö —Å–Ω–∏–º–∫–æ–≤
   */
  compareSnapshots(snapshot1: DebugSnapshot, snapshot2: DebugSnapshot): any {
    const changes = {
      timestamp: {
        from: snapshot1.timestamp,
        to: snapshot2.timestamp,
        diff: snapshot2.timestamp - snapshot1.timestamp
      },
      elements: this.compareObjects(snapshot1.elements, snapshot2.elements),
      groups: this.compareObjects(snapshot1.groups, snapshot2.groups),
      viewport: this.compareObjects(snapshot1.viewport, snapshot2.viewport)
    };

    console.log('üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–Ω–∏–º–∫–æ–≤:', changes);
    return changes;
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   */
  @computed
  get performanceAnalysis() {
    const metrics = performanceMonitor.getAllMetrics();

    if (metrics.length === 0) {
      return { summary: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏' };
    }

    const avgRenderTime = metrics.reduce((sum, m) => sum + m.renderTime, 0) / metrics.length;
    const maxRenderTime = Math.max(...metrics.map(m => m.renderTime));
    const totalRecomputations = metrics.reduce((sum, m) => sum + m.recomputations, 0);

    const slowElements = metrics.filter(m => m.renderTime > 16); // > 60fps
    const activeElements = metrics.filter(m => m.recomputations > 0);

    return {
      summary: {
        totalElements: metrics.length,
        avgRenderTime: Math.round(avgRenderTime * 100) / 100,
        maxRenderTime: Math.round(maxRenderTime * 100) / 100,
        totalRecomputations,
        slowElementsCount: slowElements.length,
        activeElementsCount: activeElements.length
      },
      slowElements: slowElements.map(m => ({
        id: m.elementId,
        renderTime: m.renderTime,
        recomputations: m.recomputations
      })),
      recommendations: this.generatePerformanceRecommendations(metrics)
    };
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
   */
  @computed
  get filteredEvents() {
    return this.events.filter(event => {
      const levelPriority = {
        'error': 4,
        'warning': 3,
        'info': 2,
        'debug': 1
      };

      const configPriority = levelPriority[this.config.logLevel];
      const eventPriority = levelPriority[event.type as keyof typeof levelPriority] || 1;

      return eventPriority >= configPriority;
    });
  }

  /**
   * –ü–æ–∏—Å–∫ –ø—Ä–æ–±–ª–µ–º –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
   */
  validateConfiguration(elements: Map<string, StickyElement>): string[] {
    const issues: string[] = [];

    elements.forEach((element, id) => {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ z-index
      const conflictingElements = Array.from(elements.values()).filter(
        el => el.id !== id &&
        el.currentZIndex === element.currentZIndex &&
        el.isActive &&
        element.isActive
      );

      if (conflictingElements.length > 0) {
        issues.push(
          `‚ùó –ö–æ–Ω—Ñ–ª–∏–∫—Ç z-index —É —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${id}, ${conflictingElements.map(el => el.id).join(', ')}`
        );
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      const metrics = performanceMonitor.getMetrics(id);
      if (metrics && metrics.renderTime > 32) { // < 30fps
        issues.push(`üêå –ú–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞ "${id}": ${metrics.renderTime.toFixed(2)}–º—Å`);
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
      if (!element.config.direction) {
        issues.push(`‚ö†Ô∏è –ù–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞ "${id}"`);
      }

      if (element.config.offset && Object.keys(element.config.offset).length === 0) {
        issues.push(`‚ö†Ô∏è –ü—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç offset –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞ "${id}"`);
      }
    });

    return issues;
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ overlay –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
   */
  private createVisualOverlay(): void {
    if (this.visualOverlay) return;

    this.visualOverlay = document.createElement('div');
    this.visualOverlay.setAttribute('data-sticky-debug', 'overlay');
    this.visualOverlay.style.cssText = `
      position: fixed;
      top: 10px;
      right: 10px;
      width: 300px;
      max-height: 400px;
      background: rgba(0, 0, 0, 0.9);
      color: white;
      font-family: 'Monaco', 'Menlo', monospace;
      font-size: 11px;
      padding: 10px;
      border-radius: 6px;
      z-index: 999999;
      overflow-y: auto;
      backdrop-filter: blur(10px);
      border: 1px solid rgba(255, 255, 255, 0.2);
    `;

    document.body.appendChild(this.visualOverlay);
    this.updateVisualOverlay();
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ overlay
   */
  private updateVisualOverlay(): void {
    if (!this.visualOverlay) return;

    const recentEvents = this.events.slice(-10);
    const performance = this.performanceAnalysis;

    this.visualOverlay.innerHTML = `
      <div style="margin-bottom: 8px; font-weight: bold; color: #4CAF50;">
        üîß Sticky Debug Panel
      </div>

      <div style="margin-bottom: 6px;">
        <strong>üìä Performance:</strong><br>
        Elements: ${performance.summary?.totalElements || 0}<br>
        Avg Render: ${performance.summary?.avgRenderTime || 0}ms<br>
        Slow: ${performance.summary?.slowElementsCount || 0}
      </div>

      <div style="margin-bottom: 6px;">
        <strong>üìù Recent Events:</strong>
      </div>

      ${recentEvents.map(event => `
        <div style="margin-bottom: 2px; padding: 2px; background: rgba(255,255,255,0.1); border-radius: 2px;">
          <span style="color: ${this.getEventColor(event.type)}">${this.getEventIcon(event.type)}</span>
          <span style="color: #999">${new Date(event.timestamp).toLocaleTimeString()}</span><br>
          <span style="font-size: 10px;">${event.elementId}: ${event.data.message}</span>
        </div>
      `).join('')}
    `;
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ overlay
   */
  private removeVisualOverlay(): void {
    if (this.visualOverlay) {
      document.body.removeChild(this.visualOverlay);
      this.visualOverlay = null;
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–π –æ—Ç–ª–∞–¥–∫–∏ –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞
   */
  private updateVisualDebug(elementId: string, event: DebugEvent): void {
    this.updateVisualOverlay();

    // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º
    const elements = document.querySelectorAll(`[data-sticky-id="${elementId}"]`);
    elements.forEach(el => {
      if (event.type === 'error') {
        (el as HTMLElement).style.outline = '2px solid red';
        setTimeout(() => {
          (el as HTMLElement).style.outline = '';
        }, 2000);
      }
    });
  }

  /**
   * –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å —Å –∫—Ä–∞—Å–∏–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
   */
  private logToConsole(event: DebugEvent): void {
    const icon = this.getEventIcon(event.type);
    const color = this.getEventColor(event.type);
    const time = new Date(event.timestamp).toLocaleTimeString();

    const message = `%c${icon} [${time}] ${event.elementId}: ${event.data.message}`;

    switch (event.type) {
      case 'error':
        console.error(message, `color: ${color}; font-weight: bold`, event.data);
        break;
      case 'warning':
        console.warn(message, `color: ${color}; font-weight: bold`, event.data);
        break;
      default:
        console.log(message, `color: ${color}`, event.data);
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ API –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
   */
  private setupGlobalAPI(): void {
    (window as any).__STICKY_DEBUG__ = {
      // –ú–µ—Ç–æ–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
      enable: (config?: Partial<DebugConfig>) => this.enable(config),
      disable: () => this.disable(),

      // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
      getEvents: () => this.events,
      getSnapshots: () => this.snapshots,
      getPerformance: () => this.performanceAnalysis,

      // –î–µ–π—Å—Ç–≤–∏—è
      captureSnapshot: (label?: string) => this.captureSnapshot(label),
      clearHistory: () => this.clearHistory(),
      exportData: () => this.exportDebugData(),

      // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
      setLogLevel: (level: DebugConfig['logLevel']) => {
        this.config.logLevel = level;
      },

      toggleVisual: () => {
        this.config.visualDebug = !this.config.visualDebug;
        if (this.config.visualDebug) {
          this.createVisualOverlay();
        } else {
          this.removeVisualOverlay();
        }
      }
    };

    console.log(
      '%cüîß Sticky Debug API –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ window.__STICKY_DEBUG__',
      'color: #4CAF50; font-weight: bold; font-size: 14px'
    );
  }

  /**
   * –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–Ω–∏–º–∫–æ–≤
   */
  private serializeElements(): Record<string, any> {
    // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –æ—Ç StickyManager
    // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç
    return {};
  }

  /**
   * –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä—É–ø–ø –¥–ª—è —Å–Ω–∏–º–∫–æ–≤
   */
  private serializeGroups(): Record<string, any> {
    // –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è –≥—Ä—É–ø–ø
    return {};
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ viewport
   */
  private getViewportInfo() {
    return {
      width: window.innerWidth,
      height: window.innerHeight,
      scrollX: window.scrollX,
      scrollY: window.scrollY
    };
  }

  /**
   * –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è —Å–Ω–∏–º–∫–æ–≤
   */
  private compareObjects(obj1: any, obj2: any): any {
    const changes: any = {};

    const allKeys = new Set([...Object.keys(obj1), ...Object.keys(obj2)]);

    allKeys.forEach(key => {
      if (obj1[key] !== obj2[key]) {
        changes[key] = {
          from: obj1[key],
          to: obj2[key]
        };
      }
    });

    return changes;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   */
  private generatePerformanceRecommendations(metrics: any[]): string[] {
    const recommendations: string[] = [];

    const slowElements = metrics.filter(m => m.renderTime > 16);
    if (slowElements.length > 0) {
      recommendations.push(
        `–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ —Ä–µ–Ω–¥–µ—Ä –º–µ–¥–ª–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${slowElements.map(m => m.elementId).join(', ')}`
      );
    }

    const activeElements = metrics.filter(m => m.recomputations > 30);
    if (activeElements.length > 0) {
      recommendations.push(
        `–£–º–µ–Ω—å—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ—Å—á–µ—Ç–æ–≤ –¥–ª—è: ${activeElements.map(m => m.elementId).join(', ')}`
      );
    }

    if (metrics.length > 20) {
      recommendations.push('–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–∏—Ä—Ç—É–∞–ª–∏–∑–∞—Ü–∏—é –ø—Ä–∏ –±–æ–ª—å—à–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ sticky —ç–ª–µ–º–µ–Ω—Ç–æ–≤');
    }

    return recommendations;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
   */
  private getEventIcon(type: DebugEvent['type']): string {
    const icons = {
      'error': '‚ùå',
      'warning': '‚ö†Ô∏è',
      'info': '‚ÑπÔ∏è',
      'debug': 'üîç',
      'state-change': 'üîÑ',
      'config-update': '‚öôÔ∏è',
      'registration': 'üìù',
      'unregistration': 'üóëÔ∏è'
    };

    return icons[type] || 'üìå';
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
   */
  private getEventColor(type: DebugEvent['type']): string {
    const colors = {
      'error': '#f44336',
      'warning': '#ff9800',
      'info': '#2196f3',
      'debug': '#9e9e9e',
      'state-change': '#4caf50',
      'config-update': '#673ab7',
      'registration': '#009688',
      'unregistration': '#795548'
    };

    return colors[type] || '#000000';
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ç–ª–∞–¥–∫–∏
   */
  @action
  private clearHistory(): void {
    this.events.length = 0;
    this.snapshots.length = 0;
    console.log('üßπ –ò—Å—Ç–æ—Ä–∏—è –æ—Ç–ª–∞–¥–∫–∏ –æ—á–∏—â–µ–Ω–∞');
  }

  /**
   * –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç–ª–∞–¥–∫–∏
   */
  private exportDebugData(): string {
    const data = {
      config: this.config,
      events: this.events,
      snapshots: this.snapshots,
      performance: this.performanceAnalysis,
      timestamp: Date.now()
    };

    const json = JSON.stringify(data, null, 2);

    // –°–æ–∑–¥–∞–µ–º blob –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    const blob = new Blob([json], { type: 'application/json' });
    const url = URL.createObjectURL(blob);

    const a = document.createElement('a');
    a.href = url;
    a.download = `sticky-debug-${Date.now()}.json`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);

    console.log('üì§ –î–∞–Ω–Ω—ã–µ –æ—Ç–ª–∞–¥–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã');
    return json;
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ—Ç–ª–∞–¥—á–∏–∫–∞
export const stickyDebugger = new StickyDebugger();
