import { makeObservable, observable, action, computed } from 'mobx';

import { debugLogger } from '@/debug/debugLogger';
import type { StickyConfig, StickyDirection, StickyElement, StickyGroup, StickyState, StickyBoundary, StickyPosition, StickyScrollContainer } from '@/types/sticky.types';


/**
 * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è sticky —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç MobX –¥–ª—è —Ä–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ Intersection Observer –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
 */
export class StickyManager {
  @observable elements = new Map<string, StickyElement>();
  @observable groups = new Map<string, StickyGroup>();
  @observable scrollContainers = new Map<HTMLElement, Set<string>>(); // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∏ –∏—Ö —ç–ª–µ–º–µ–Ω—Ç—ã
  @observable isSSR = typeof window === 'undefined';

  private intersectionObserver: IntersectionObserver | null = null;
  private resizeObserver: ResizeObserver | null = null;
  private scrollTimeout: number | null = null;
  private zIndexCounter = 1000;

  constructor() {
    makeObservable(this);

    if (!this.isSSR) {
      this.initializeObservers();
      this.handleResize = this.handleResize.bind(this);
      this.handleScroll = this.handleScroll.bind(this);
      this.handleContainerScroll = this.handleContainerScroll.bind(this);

      window.addEventListener('resize', this.handleResize);
      window.addEventListener('scroll', this.handleScroll, { passive: true });
    }
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   */
  private initializeObservers(): void {
    // Intersection Observer –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏
    this.intersectionObserver = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          const element = this.findElementByNode(entry.target as HTMLElement);
          if (element) {
            this.updateElementVisibility(element, entry.isIntersecting);
          }
        });
      },
      {
        root: null,
        rootMargin: '100px 0px', // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
        threshold: [0, 0.1, 0.9, 1]
      }
    );

    // Resize Observer –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ä–∞–∑–º–µ—Ä–æ–≤
    this.resizeObserver = new ResizeObserver((entries) => {
      entries.forEach((entry) => {
        const element = this.findElementByNode(entry.target as HTMLElement);
        if (element) {
          this.updateElementDimensions(element);
        }
      });
    });
  }

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ sticky —ç–ª–µ–º–µ–Ω—Ç–∞
   */
  @action
  registerSticky(htmlElement: HTMLElement, config: StickyConfig): void {
    if (this.elements.has(config.id)) {
      debugLogger.warning(config.id, '–ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞', { config });
      console.warn(`Sticky element with id "${config.id}" already exists`);
      return;
    }

    debugLogger.info(config.id, '–ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ sticky —ç–ª–µ–º–µ–Ω—Ç–∞', {
      elementTag: htmlElement.tagName,
      config
    });

    const originalPosition = htmlElement.getBoundingClientRect();
    const zIndex = config.zIndex || this.getNextZIndex(config.priority);

    const stickyElement: StickyElement = {
      id: config.id,
      element: htmlElement,
      config,
      state: 'normal',
      previousState: null,
      originalPosition,
      currentZIndex: zIndex,
      isActive: false,
      lastUpdate: Date.now(),
      transitionCount: 0
    };

    this.elements.set(config.id, stickyElement);

    // üîß –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    debugLogger.registration(config.id, {
      zIndex,
      position: originalPosition,
      totalElements: this.elements.size
    });

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–∏
    this.intersectionObserver?.observe(htmlElement);
    this.resizeObserver?.observe(htmlElement);

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π —Å–∫—Ä–æ–ª–ª-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
    if (config.scrollContainer) {
      this.registerScrollContainer(config.id, config.scrollContainer);
    }

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏
    this.applyInitialStyles(stickyElement);

    // –ò–Ω–∏—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∑–∏—Ü–∏–∏
    this.updateStickyState(stickyElement);
  }

  /**
   * –û—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ sticky —ç–ª–µ–º–µ–Ω—Ç–∞
   */
  @action
  unregisterSticky(id: string): void {
    const element = this.elements.get(id);
    if (!element) {
      debugLogger.warning(id, '–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞');
      return;
    }

    debugLogger.info(id, '–ù–∞—á–∞–ª–æ —É–¥–∞–ª–µ–Ω–∏—è sticky —ç–ª–µ–º–µ–Ω—Ç–∞', {
      groupsCount: this.groups.size,
      totalElements: this.elements.size
    });

    // –û—Ç–∫–ª—é—á–∞–µ–º –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–∏
    this.intersectionObserver?.unobserve(element.element);
    this.resizeObserver?.unobserve(element.element);

    // –û—Ç–∫–ª—é—á–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –µ—Å–ª–∏ –±—ã–ª –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
    if (element.config.scrollContainer) {
      this.unregisterScrollContainer(id);
    }

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∏–ª–∏
    this.resetElementStyles(element);

    // –£–¥–∞–ª—è–µ–º –∏–∑ –≥—Ä—É–ø–ø
    this.groups.forEach((group) => {
      group.elements.delete(id);
    });

    this.elements.delete(id);

    // üîß –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
    debugLogger.unregistration(id, 'manual unregister');
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞
   */
  @action
  updateConfig(id: string, newConfig: Partial<StickyConfig>): void {
    const element = this.elements.get(id);
    if (!element) return;

    element.config = { ...element.config, ...newConfig };

    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º z-index –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    if (newConfig.priority !== undefined) {
      element.currentZIndex = this.getNextZIndex(newConfig.priority);
    }

    this.updateStickyState(element);
    this.updateGroupPriorities();
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã sticky —ç–ª–µ–º–µ–Ω—Ç–æ–≤
   */
  @action
  createGroup(groupId: string, priority: number): void {
    if (this.groups.has(groupId)) {
      console.warn(`Sticky group "${groupId}" already exists`);
      return;
    }

    this.groups.set(groupId, {
      id: groupId,
      elements: new Map(),
      priority,
      maxZIndex: this.getNextZIndex(priority)
    });
  }

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –≥—Ä—É–ø–ø—É
   */
  @action
  addToGroup(elementId: string, groupId: string): void {
    const element = this.elements.get(elementId);
    const group = this.groups.get(groupId);

    if (!element || !group) {
      console.warn(`Element "${elementId}" or group "${groupId}" not found`);
      return;
    }

    group.elements.set(elementId, element);
    element.currentZIndex = this.getGroupZIndex(group, element.config.priority);

    this.updateGroupPriorities();
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è sticky —Å–æ—Å—Ç–æ—è–Ω–∏—è
   */
  @action
  protected updateStickyState(element: StickyElement): void {
    if (element.config.disabled || this.isSSR) {
      this.resetElementStyles(element);
      return;
    }

    const rect = element.element.getBoundingClientRect();

    const newState = this.calculateStickyState(element, rect);

    if (newState !== element.state) {
      element.state = newState;
      this.applyStateStyles(element, newState);

      // –í—ã–∑—ã–≤–∞–µ–º callback –µ—Å–ª–∏ –µ—Å—Ç—å
      this.notifyStateChange(element, newState);
    }
  }

  /**
   * –†–∞—Å—á–µ—Ç –Ω–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è sticky —ç–ª–µ–º–µ–Ω—Ç–∞
   */
  private calculateStickyState(element: StickyElement, rect: DOMRect): StickyState {
    const { direction, offset, boundary, scrollContainer } = element.config;

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏–ª–∏ viewport
    const container = scrollContainer ?
      this.getContainerDimensions(scrollContainer.element) :
      this.getViewportDimensions();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –µ—Å–ª–∏ –∑–∞–¥–∞–Ω—ã
    if (boundary && this.isOutsideBoundary(element, boundary)) {
      return 'bottom-reached';
    }

    // –î–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–∑–∏—Ü–∏—é —ç–ª–µ–º–µ–Ω—Ç–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    const targetRect = scrollContainer ?
      this.getRelativeRect(rect, scrollContainer.element) :
      rect;

    // –£—á–∏—Ç—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    const containerOffset = scrollContainer?.offset || {};

    switch (direction) {
      case 'top':
        const topThreshold = (offset.top || 0) + (containerOffset.top || 0);
        return targetRect.top <= topThreshold ? 'sticky' : 'normal';

      case 'bottom':
        const bottomThreshold = container.height - (offset.bottom || 0) - (containerOffset.bottom || 0);
        return targetRect.bottom >= bottomThreshold ? 'sticky' : 'normal';

      case 'left':
        const leftThreshold = (offset.left || 0) + (containerOffset.left || 0);
        return targetRect.left <= leftThreshold ? 'sticky' : 'normal';

      case 'right':
        const rightThreshold = container.width - (offset.right || 0) - (containerOffset.right || 0);
        return targetRect.right >= rightThreshold ? 'sticky' : 'normal';

      default:
        return 'normal';
    }
  }

  /**
   * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
   */
  private applyStateStyles(element: StickyElement, state: StickyState): void {
    const { direction, offset, smooth, scrollContainer } = element.config;
    const style = element.element.style;

    // –ë–∞–∑–æ–≤—ã–µ —Å—Ç–∏–ª–∏
    const baseStyles = {
      transition: smooth ? 'all 0.2s ease-out' : 'none',
      zIndex: element.currentZIndex.toString()
    };

    switch (state) {
      case 'sticky':
        // –î–ª—è –Ω–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–µ offset[direction]
        if (['top', 'bottom', 'left', 'right'].includes(direction)) {
          // –î–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º absolute –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
          if (scrollContainer) {
            const containerRect = scrollContainer.element.getBoundingClientRect();
            const containerOffset = scrollContainer.offset || {};

            Object.assign(style, baseStyles, {
              position: 'absolute',
              ...this.getContainerPosition(element, direction, offset, containerRect, containerOffset)
            });
          } else {
            // –û–±—ã—á–Ω–æ–µ fixed –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è viewport
            Object.assign(style, baseStyles, {
              position: 'fixed',
              [direction]: `${offset[direction as keyof StickyPosition] || 0}px`
            });
          }
        } else {
          // –î–ª—è –Ω–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
          Object.assign(style, baseStyles, {
            position: scrollContainer ? 'absolute' : 'fixed'
          });
        }
        element.isActive = true;
        break;

      case 'bottom-reached':
        if (['top', 'bottom', 'left', 'right'].includes(direction)) {
          Object.assign(style, baseStyles, {
            position: 'absolute',
            [this.getOppositeDirection(direction)]: '0px'
          });
        } else {
          Object.assign(style, baseStyles, {
            position: 'absolute'
          });
        }
        element.isActive = false;
        break;

      case 'normal':
      default:
        this.resetElementStyles(element);
        element.isActive = false;
        break;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
   */
  @computed
  get activeElements(): StickyElement[] {
    return Array.from(this.elements.values()).filter(el => el.isActive);
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫—Ä–æ–ª–ª–∞ —Å throttling
   */
  private handleScroll(): void {
    if (this.scrollTimeout) return;

    this.scrollTimeout = window.setTimeout(() => {
      this.elements.forEach((element) => {
        this.updateStickyState(element);
      });
      this.scrollTimeout = null;
    }, 16); // ~60fps
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
   */
  private handleResize(): void {
    this.elements.forEach((element) => {
      element.originalPosition = element.element.getBoundingClientRect();
      this.updateStickyState(element);
    });
  }

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Å–∫—Ä–æ–ª–ª-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
   */
  @action
  private registerScrollContainer(elementId: string, container: StickyScrollContainer): void {
    const containerElement = container.element;

    if (!this.scrollContainers.has(containerElement)) {
      this.scrollContainers.set(containerElement, new Set());

      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫—Ä–æ–ª–ª–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
      containerElement.addEventListener('scroll', this.handleContainerScroll, { passive: true });

      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å –∑–∞ —Ä–∞–∑–º–µ—Ä–∞–º–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      if (container.observeResize !== false) {
        this.resizeObserver?.observe(containerElement);
      }
    }

    this.scrollContainers.get(containerElement)?.add(elementId);
  }

  /**
   * –û—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
   */
  @action
  private unregisterScrollContainer(elementId: string): void {
    this.scrollContainers.forEach((elementIds, container) => {
      if (elementIds.has(elementId)) {
        elementIds.delete(elementId);

        // –ï—Å–ª–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ –±–æ–ª—å—à–µ –Ω–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –æ—Ç–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        if (elementIds.size === 0) {
          container.removeEventListener('scroll', this.handleContainerScroll);
          this.resizeObserver?.unobserve(container);
          this.scrollContainers.delete(container);
        }
      }
    });
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫—Ä–æ–ª–ª–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
   */
  private handleContainerScroll(event: Event): void {
    const container = event.target as HTMLElement;
    const elementIds = this.scrollContainers.get(container);

    if (!elementIds) return;

    elementIds.forEach(elementId => {
      const element = this.elements.get(elementId);
      if (element) {
        this.updateStickyState(element);
      }
    });
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ z-index —Å —É—á–µ—Ç–æ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
   */
  private getNextZIndex(priority: number): number {
    return this.zIndexCounter + priority * 100;
  }

  /**
   * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
   */
  private getViewportDimensions() {
    return {
      width: window.innerWidth,
      height: window.innerHeight
    };
  }

  private getOppositeDirection(direction: StickyDirection): string {
    const opposites: Record<string, string> = {
      top: 'bottom',
      bottom: 'top',
      left: 'right',
      right: 'left'
    };
    return opposites[direction] || 'bottom'; // Fallback –¥–ª—è –Ω–æ–≤—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
  }

  private findElementByNode(node: HTMLElement): StickyElement | undefined {
    return Array.from(this.elements.values()).find(el => el.element === node);
  }

  private isOutsideBoundary(element: StickyElement, boundary: StickyBoundary): boolean {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —ç–ª–µ–º–µ–Ω—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –≥—Ä–∞–Ω–∏—Ü—ã
    const elementRect = element.element.getBoundingClientRect();
    const boundaryRect = boundary.element.getBoundingClientRect();
    const offset = boundary.offset || 0;

    // –≠–ª–µ–º–µ–Ω—Ç —Å—á–∏—Ç–∞–µ—Ç—Å—è –≤–Ω–µ –≥—Ä–∞–Ω–∏—Ü—ã, –µ—Å–ª–∏ –µ–≥–æ –≤–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å
    // –ø—Ä–µ–≤—ã—à–∞–µ—Ç –Ω–∏–∂–Ω—é—é –≥—Ä–∞–Ω–∏—Ü—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Å —É—á–µ—Ç–æ–º offset
    return elementRect.top > (boundaryRect.bottom - offset);
  }

  private resetElementStyles(element: StickyElement): void {
    const style = element.element.style;
    style.position = '';
    style.top = '';
    style.bottom = '';
    style.left = '';
    style.right = '';
    style.zIndex = '';
    style.transition = '';
  }

  private applyInitialStyles(element: StickyElement): void {
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    const style = element.element.style;
    const dataset = element.element.dataset;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    if (!dataset['originalPosition']) {
      dataset['originalPosition'] = style.position || 'static';
      dataset['originalTop'] = style.top || 'auto';
      dataset['originalLeft'] = style.left || 'auto';
      dataset['originalZIndex'] = style.zIndex || 'auto';
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    debugLogger.debug(element.id, 'Initial styles applied');
  }

  private updateElementVisibility(element: StickyElement, isVisible: boolean): void {
    // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤–∏–¥–∏–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    if (isVisible) {
      this.updateStickyState(element);
    }
  }

  private updateElementDimensions(element: StickyElement): void {
    element.originalPosition = element.element.getBoundingClientRect();
    this.updateStickyState(element);
  }

  private updateGroupPriorities(): void {
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –≥—Ä—É–ø–ø
    this.groups.forEach((group) => {
      let maxZ = 0;
      group.elements.forEach((element) => {
        maxZ = Math.max(maxZ, element.currentZIndex);
      });
      group.maxZIndex = maxZ;
    });
  }

  private getGroupZIndex(group: StickyGroup, priority: number): number {
    return group.maxZIndex + priority;
  }

  private notifyStateChange(element: StickyElement, newState: StickyState): void {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å callback'–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–º–µ–Ω–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    console.debug(`Sticky element ${element.id} changed state to ${newState}`);
  }

  /**
   * –ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞
   */
  @action
  public refreshElement(element: StickyElement): void {
    this.updateStickyState(element);
  }

  /**
   * –ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
   */
  @action
  public refreshAllElements(): void {
    this.elements.forEach((element) => {
      this.updateStickyState(element);
    });
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
   */
  destroy(): void {
    if (!this.isSSR) {
      window.removeEventListener('resize', this.handleResize);
      window.removeEventListener('scroll', this.handleScroll);

      this.intersectionObserver?.disconnect();
      this.resizeObserver?.disconnect();
    }

    if (this.scrollTimeout) {
      clearTimeout(this.scrollTimeout);
    }

    this.elements.clear();
    this.groups.clear();
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
   */
  private getContainerDimensions(container: HTMLElement) {
    const rect = container.getBoundingClientRect();
    return {
      width: rect.width,
      height: rect.height,
      top: rect.top,
      left: rect.left,
      bottom: rect.bottom,
      right: rect.right
    };
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
   */
  private getRelativeRect(elementRect: DOMRect, container: HTMLElement): DOMRect {
    const containerRect = container.getBoundingClientRect();
    const scrollTop = container.scrollTop;
    const scrollLeft = container.scrollLeft;

    // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —ç–ª–µ–º–µ–Ω—Ç–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –≤–∏–¥–∏–º–æ–π –æ–±–ª–∞—Å—Ç–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    return {
      top: elementRect.top - containerRect.top + scrollTop,
      left: elementRect.left - containerRect.left + scrollLeft,
      right: elementRect.right - containerRect.left + scrollLeft,
      bottom: elementRect.bottom - containerRect.top + scrollTop,
      width: elementRect.width,
      height: elementRect.height,
      x: elementRect.x - containerRect.x + scrollLeft,
      y: elementRect.y - containerRect.y + scrollTop,
      toJSON: elementRect.toJSON
    } as DOMRect;
  }

  /**
   * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤–Ω—É—Ç—Ä–∏ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
   */
  private getContainerPosition(
    element: StickyElement,
    direction: StickyDirection,
    offset: StickyPosition,
    _containerRect: DOMRect, // –ü–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —á—Ç–æ –ø–∞—Ä–∞–º–µ—Ç—Ä –Ω–∞–º–µ—Ä–µ–Ω–Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    containerOffset: StickyPosition
  ): Partial<CSSStyleDeclaration> {
    const container = element.config.scrollContainer!.element;
    const scrollTop = container.scrollTop;
    const scrollLeft = container.scrollLeft;

    const styles: Partial<CSSStyleDeclaration> = {};

    switch (direction) {
      case 'top':
        styles.top = `${scrollTop + (offset.top || 0) + (containerOffset.top || 0)}px`;
        break;
      case 'bottom':
        styles.bottom = `${(offset.bottom || 0) + (containerOffset.bottom || 0)}px`;
        break;
      case 'left':
        styles.left = `${scrollLeft + (offset.left || 0) + (containerOffset.left || 0)}px`;
        break;
      case 'right':
        styles.right = `${(offset.right || 0) + (containerOffset.right || 0)}px`;
        break;
    }

    return styles;
  }
}
