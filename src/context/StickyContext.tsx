import React, { createContext, useContext, useRef, useEffect } from 'react';
import { observer } from 'mobx-react-lite';

import type { StickyContextValue } from '@/types/sticky.types';
import { StickyManager } from '@/core/StickyManager';
import { debugLogger } from '@/debug/debugLogger';


/**
 * Context –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è sticky —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é
 */
const StickyContext = createContext<StickyContextValue | null>(null);

interface StickyProviderProps {
  children: React.ReactNode;
  debug?: boolean;
}

/**
 * –ü—Ä–æ–≤–∞–π–¥–µ—Ä sticky –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
 * –°–æ–∑–¥–∞–µ—Ç –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä StickyManager –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
export const StickyProvider: React.FC<StickyProviderProps> = observer(({
  children,
  debug = false
}) => {
  const managerRef = useRef<StickyManager | null>(null);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
  if (!managerRef.current) {
    managerRef.current = new StickyManager();

    // üîß –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    debugLogger.info('context', 'StickyProvider –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω', {
      debug,
      timestamp: Date.now()
    });

    if (debug) {
      // –î–æ–±–∞–≤–ª—è–µ–º debug —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª
      (window as unknown as { __STICKY_DEBUG__: StickyManager }).__STICKY_DEBUG__ = managerRef.current;
      debugLogger.info('context', 'Debug —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω', {
        globalObject: '__STICKY_DEBUG__'
      });
    }
  }

  const manager = managerRef.current;

  // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      debugLogger.info('context', 'StickyProvider —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω', {
        totalElements: manager.elements.size,
        totalGroups: manager.groups.size
      });
      manager.destroy();
    };
  }, [manager]);

  const contextValue: StickyContextValue = {
    // –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    registerSticky: (element, config) => manager.registerSticky(element, config),
    unregisterSticky: (id) => manager.unregisterSticky(id),
    updateConfig: (id, config) => manager.updateConfig(id, config),

    // –ì—Ä—É–ø–ø—ã
    createGroup: (groupId, priority) => manager.createGroup(groupId, priority),
    addToGroup: (elementId, groupId) => manager.addToGroup(elementId, groupId),
    removeFromGroup: (elementId, groupId) => {
      const group = manager.groups.get(groupId);
      if (group) {
        group.elements.delete(elementId);
      }
    },

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ (—Ä–µ–∞–∫—Ç–∏–≤–Ω–æ–µ —á–µ—Ä–µ–∑ MobX)
    elements: manager.elements,
    groups: manager.groups,
    isSSR: manager.isSSR,

    // –£—Ç–∏–ª–∏—Ç—ã
    getElementState: (id) => {
      const element = manager.elements.get(id);
      return element ? element.state : null;
    },
    getActiveElements: () => manager.activeElements,
    refreshAll: () => {
      manager.refreshAllElements();
    }
  };

  return (
    <StickyContext.Provider value={contextValue}>
      {children}
    </StickyContext.Provider>
  );
});

/**
 * –•—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è sticky –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
 */
export const useStickyContext = (): StickyContextValue => {
  const context = useContext(StickyContext);

  if (!context) {
    throw new Error('useStickyContext must be used within StickyProvider');
  }

  return context;
};
