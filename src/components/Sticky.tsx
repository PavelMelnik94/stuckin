import React, { forwardRef, useImperativeHandle } from 'react';
import { observer } from 'mobx-react-lite';

import type { StickyState, UseStickyOptions } from '@/types/sticky.types';
import { useSticky } from '@/hooks';
import { debugLogger } from '@/debug/debugLogger';


export interface StickyProps extends UseStickyOptions {
  children: React.ReactNode;
  className?: string;
  activeClassName?: string;
  tag?: keyof JSX.IntrinsicElements;
  style?: React.CSSProperties;
  activeStyle?: React.CSSProperties;
}

export interface StickyRef {
  element: HTMLElement | null;
  state: StickyState | null;
  isSticky: boolean;
  refresh: () => void;
  disable: () => void;
  enable: () => void;
}

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è sticky —ç–ª–µ–º–µ–Ω—Ç–æ–≤
 * –ü—Ä–∏–Ω—Ü–∏–ø Open/Closed: —Ä–∞—Å—à–∏—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ props
 */
export const Sticky = observer(forwardRef<StickyRef, StickyProps>(({
  children,
  className = '',
  activeClassName = '',
  tag: Tag = 'div',
  style,
  activeStyle,
  ...stickyOptions
}, ref) => {
  const {
    ref: elementRef,
    state,
    isSticky,
    isActive,
    refresh,
    disable,
    enable
  } = useSticky(stickyOptions);

  /**
   * –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º API —á–µ—Ä–µ–∑ ref
   */
  useImperativeHandle(ref, () => ({
    element: elementRef.current,
    state,
    isSticky,
    refresh,
    disable,
    enable
  }), [elementRef.current, state, isSticky, refresh, disable, enable]);

  /**
   * –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞—Å—Å—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
   */
  const classes = [
    className,
    isActive && activeClassName,
    `sticky-${state}`,
    isSticky && 'is-sticky'
  ].filter(Boolean).join(' ');

  // üîß –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  React.useEffect(() => {
    if (stickyOptions.id && state) {
      debugLogger.debug(stickyOptions.id, '–ö–æ–º–ø–æ–Ω–µ–Ω—Ç Sticky: –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è', {
        state,
        isSticky,
        isActive,
        className: classes
      });
    }
  }, [state, isSticky, isActive, stickyOptions.id, classes]);

  /**
   * –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å—Ç–∏–ª–∏
   */
  const combinedStyle = {
    ...style,
    ...(isActive && activeStyle)
  };

  const Element = Tag as React.ElementType;

  return (
    <Element
      ref={elementRef}
      className={classes}
      style={combinedStyle}
      data-sticky-id={stickyOptions.id}
      data-sticky-state={state}
    >
      {children}
    </Element>
  );
}));

Sticky.displayName = 'Sticky';
