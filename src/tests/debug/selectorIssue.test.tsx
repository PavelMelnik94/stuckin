/**
 * –ü—Ä–æ—Å—Ç–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏ –≤ StickyContainer
 */

import { describe, it, expect, beforeEach } from '@jest/globals';

// –ú–æ–∫–∞–µ–º MobX observer
jest.mock('mobx-react-lite', () => ({
  observer: (component: any) => component,
}));

describe('StickyContainer - Selector Issue Demo', () => {
  beforeEach(() => {
    document.body.innerHTML = '';

    global.IntersectionObserver = jest.fn(() => ({
      observe: jest.fn(),
      unobserve: jest.fn(),
      disconnect: jest.fn(),
    })) as any;

    global.ResizeObserver = jest.fn(() => ({
      observe: jest.fn(),
      unobserve: jest.fn(),
      disconnect: jest.fn(),
    })) as any;
  });

  it('should demonstrate querySelector resolution', () => {
    // –°–æ–∑–¥–∞–µ–º DOM —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤ body
    document.body.innerHTML = `
      <div class="modal-container" id="modal">
        <div class="modal-header">Header</div>
        <div class="modal-body">
          <!-- –ó–¥–µ—Å—å –±—É–¥–µ—Ç StickyContainer -->
        </div>
      </div>
    `;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ–ª–µ–∫—Ç–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç
    const foundBySelector = document.querySelector('.modal-container');
    const foundById = document.getElementById('modal');

    expect(foundBySelector).toBeTruthy();
    expect(foundById).toBeTruthy();
    expect(foundBySelector).toBe(foundById);

    console.log('‚úÖ querySelector —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    console.log('Element found:', foundBySelector?.className);
  });

  it('should show the timing issue with dynamic content', async () => {
    // –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    const container = document.createElement('div');
    container.className = 'dynamic-container';
    document.body.appendChild(container);

    // –í —ç—Ç–æ—Ç –º–æ–º–µ–Ω—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø—É—Å—Ç–æ–π
    expect(container.children.length).toBe(0);

    // –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–æ–∑–∂–µ (–∫–∞–∫ –≤ React)
    const content = document.createElement('div');
    content.className = 'sticky-content';
    content.textContent = 'Sticky element';
    container.appendChild(content);

    // –¢–µ–ø–µ—Ä—å –∏–∑ sticky-content –º–æ–∂–µ–º –Ω–∞–π—Ç–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    const foundFromInside = content.closest('.dynamic-container');
    expect(foundFromInside).toBe(container);

    // –ù–æ –µ—Å–ª–∏ –±—ã –º—ã –ø—ã—Ç–∞–ª–∏—Å—å –Ω–∞–π—Ç–∏ —á–µ—Ä–µ–∑ querySelector –∏–∑–Ω—É—Ç—Ä–∏ content...
    const foundByQuerySelector = document.querySelector('.dynamic-container');
    expect(foundByQuerySelector).toBe(container);

    console.log('‚úÖ –°–µ–ª–µ–∫—Ç–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–∞–∂–µ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º');
    console.log('Container:', foundByQuerySelector?.className);
    console.log('Content:', content.textContent);
  });

  it('should demonstrate the real issue with useMemo timing', () => {
    // –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–∏—Ç—É–∞—Ü–∏—é –∏–∑ useStickyInContainer
    const resolveContainer = (containerSelector: string) => {
      console.log('üîç –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä:', containerSelector);
      const found = document.querySelector(containerSelector);
      console.log('üìç –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç:', found?.className || 'null');
      return found as HTMLElement;
    };

    // –°—Ü–µ–Ω–∞—Ä–∏–π 1: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    document.body.innerHTML = '<div class="existing-container">Existing</div>';

    const existing = resolveContainer('.existing-container');
    expect(existing).toBeTruthy();
    expect(existing.className).toBe('existing-container');

    // –°—Ü–µ–Ω–∞—Ä–∏–π 2: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    document.body.innerHTML = '<div class="other-container">Other</div>';

    const missing = resolveContainer('.missing-container');
    expect(missing).toBeNull();

    // –°—Ü–µ–Ω–∞—Ä–∏–π 3: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–æ–∑–¥–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–∏—Å–∫–∞
    document.body.innerHTML = '';

    const notYetCreated = resolveContainer('.future-container');
    expect(notYetCreated).toBeNull();

    // –¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    document.body.innerHTML = '<div class="future-container">Future</div>';

    const nowExists = resolveContainer('.future-container');
    expect(nowExists).toBeTruthy();

    console.log('‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–±–ª–µ–º—ã timing –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  });

  it('should show useMemo dependency issue', () => {
    // –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É useMemo —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
    let memoCallCount = 0;
    let lastContainer: HTMLElement | null = null;

    const simulateUseMemo = (containerProp: string | HTMLElement | null) => {
      memoCallCount++;
      console.log(`üîÑ useMemo call #${memoCallCount}, container:`, typeof containerProp === 'string' ? containerProp : containerProp?.className || 'null');

      if (!containerProp) return null;

      if (typeof containerProp === 'string') {
        const found = document.querySelector(containerProp) as HTMLElement;
        console.log('üîç querySelector result:', found?.className || 'null');
        lastContainer = found;
        return found;
      }

      lastContainer = containerProp;
      return containerProp;
    };

    // –¢–µ—Å—Ç 1: –°–µ–ª–µ–∫—Ç–æ—Ä —Å–æ —Å—Ç—Ä–æ–∫–æ–π
    document.body.innerHTML = '<div class="test-container">Test</div>';

    const result1 = simulateUseMemo('.test-container');
    expect(result1).toBeTruthy();
    expect(memoCallCount).toBe(1);

    // –¢–µ—Å—Ç 2: –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤ —Å —Ç–µ–º –∂–µ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º (–¥–æ–ª–∂–µ–Ω –∑–∞–∫–µ—à–∏—Ä–æ–≤–∞—Ç—å—Å—è)
    const result2 = simulateUseMemo('.test-container');
    expect(result2).toBe(lastContainer);
    expect(memoCallCount).toBe(2); // useMemo –≤—Å–µ —Ä–∞–≤–Ω–æ –≤—ã–∑–æ–≤–µ—Ç—Å—è, –Ω–æ –≤–µ—Ä–Ω–µ—Ç —Ç–æ—Ç –∂–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç

    // –¢–µ—Å—Ç 3: –≠–ª–µ–º–µ–Ω—Ç —É–¥–∞–ª–µ–Ω –∏–∑ DOM, –Ω–æ useMemo –∑–∞–∫–µ—à–∏—Ä–æ–≤–∞–Ω
    document.body.innerHTML = '';

    const result3 = simulateUseMemo('.test-container');
    expect(result3).toBeNull(); // querySelector –Ω–µ –Ω–∞–π–¥–µ—Ç —ç–ª–µ–º–µ–Ω—Ç
    expect(memoCallCount).toBe(3);

    console.log('‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–±–ª–µ–º—ã useMemo –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    console.log('Total memo calls:', memoCallCount);
  });
});
