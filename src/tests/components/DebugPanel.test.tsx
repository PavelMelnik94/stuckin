/**
 * Unit —Ç–µ—Å—Ç—ã –¥–ª—è DebugPanel –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
 */

import React from 'react';
import { render, screen, fireEvent, waitFor, act } from '@testing-library/react';

import { DebugPanel } from '../../components/DebugPanel';
import { StickyProvider } from '../../context/StickyContext';
import { ENV } from '../../utils/env';
import { stickyDebugger } from '../../debug/StickyDebugger';

// –ú–æ–∫–∞–µ–º ENV –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è production —Ä–µ–∂–∏–º–∞
jest.mock('../../utils/env', () => ({
  ENV: {
    isProduction: false,
    isDev: true,
    isTest: true,
    isBrowser: true,
    enableDebug: true,
    enablePerformanceTracking: true
  },
  envLog: {
    dev: jest.fn(),
    warn: jest.fn(),
    error: jest.fn(),
    performance: jest.fn()
  }
}));

// –ú–æ–∫–∞–µ–º StickyDebugger –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –µ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
jest.mock('../../debug/StickyDebugger', () => ({
  stickyDebugger: {
    filteredEvents: [],
    allSnapshots: [],
    performanceAnalysis: { summary: null, slowElements: [], recommendations: [] },
    log: jest.fn(),
    clearHistory: jest.fn(),
    captureSnapshot: jest.fn(),
    config: { enabled: true, logLevel: 'info', maxHistorySize: 100, visualDebug: true, performanceTracking: true, autoCapture: true },
    events: []
  }
}));

// –û–±–µ—Ä—Ç–∫–∞ —Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º
const TestWrapper: React.FC<{ children: React.ReactNode }> = ({ children }) => (
  <StickyProvider>{children}</StickyProvider>
);

describe('DebugPanel', () => {
  // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º
  beforeEach(() => {
    jest.clearAllMocks();
    jest.clearAllTimers();

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–æ–∫ debugger
    (stickyDebugger.filteredEvents as any).length = 0;
    (stickyDebugger.allSnapshots as any).length = 0;
    (stickyDebugger as any).performanceAnalysis = { summary: null, slowElements: [], recommendations: [] };
  });

  afterEach(() => {
    jest.useRealTimers();
  });

  describe('–±–∞–∑–æ–≤—ã–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥', () => {
    test('–¥–æ–ª–∂–µ–Ω —Ä–µ–Ω–¥–µ—Ä–∏—Ç—å debug panel', () => {
      render(
        <TestWrapper>
          <DebugPanel />
        </TestWrapper>
      );

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ debug –ø–∞–Ω–µ–ª–∏
      expect(screen.getByText('üîß Sticky Debug')).toBeInTheDocument();
      expect(screen.getByText('events')).toBeInTheDocument();
      expect(screen.getByText('performance')).toBeInTheDocument();
      expect(screen.getByText('snapshots')).toBeInTheDocument();
    });

    test('–¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ sticky —ç–ª–µ–º–µ–Ω—Ç–∞—Ö', () => {
      render(
        <TestWrapper>
          <DebugPanel />
        </TestWrapper>
      );

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ debug –ø–∞–Ω–µ–ª–∏
      expect(screen.getByText('üîß Sticky Debug')).toBeInTheDocument();
      expect(screen.getByText('–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è')).toBeInTheDocument();
    });

    test('–Ω–µ –¥–æ–ª–∂–µ–Ω —Ä–µ–Ω–¥–µ—Ä–∏—Ç—å—Å—è –≤ production —Ä–µ–∂–∏–º–µ', () => {
      // –ú–æ–∫–∞–µ–º production —Ä–µ–∂–∏–º
      (ENV as any).isProduction = true;

      const { container } = render(
        <TestWrapper>
          <DebugPanel />
        </TestWrapper>
      );

      expect(container.firstChild).toBeNull();

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
      (ENV as any).isProduction = false;
    });
  });

  describe('—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º', () => {
    test('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å toggle –ø–æ–∫–∞–∑–∞ –ø–∞–Ω–µ–ª–∏', () => {
      render(
        <TestWrapper>
          <DebugPanel />
        </TestWrapper>
      );

      // –ù–∞—Ö–æ–¥–∏–º –∫–Ω–æ–ø–∫—É –ø–∞—É–∑—ã –ø–æ title
      const pauseButton = screen.getByTitle('–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ');
      expect(pauseButton).toBeInTheDocument();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –∫–ª–∏–∫–∞–±–µ–ª–µ–Ω
      fireEvent.click(pauseButton);

      // –ö–Ω–æ–ø–∫–∞ –¥–æ–ª–∂–Ω–∞ –æ—Å—Ç–∞—Ç—å—Å—è –≤–∏–¥–∏–º–æ–π
      expect(pauseButton).toBeInTheDocument();
    });

    test('–¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å collapsed —Å–æ—Å—Ç–æ—è–Ω–∏–µ', () => {
      render(
        <TestWrapper>
          <DebugPanel />
        </TestWrapper>
      );

      // –ù–∞—Ö–æ–¥–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –∫–ª–∏–∫–∞
      const header = screen.getByText('üîß Sticky Debug');

      // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –ø–∞–Ω–µ–ª—å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–∞ - –µ—Å—Ç—å —Ç–∞–±—ã
      expect(screen.getByText('events')).toBeInTheDocument();

      // –ö–ª–∏–∫–∞–µ–º –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É —á—Ç–æ–±—ã —Å–≤–µ—Ä–Ω—É—Ç—å
      fireEvent.click(header);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–∞–Ω–µ–ª—å —Å–≤–µ—Ä–Ω—É–ª–∞—Å—å - —Ç–∞–±—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–ø–∞—Å—Ç—å
      act(() => {
        expect(screen.queryByText('events')).not.toBeInTheDocument();
      });
    });

    test('–¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å–≤–µ—Ä–Ω—É—Ç–æ–º —Ä–µ–∂–∏–º–µ', () => {
      render(
        <TestWrapper>
          <DebugPanel collapsed />
        </TestWrapper>
      );

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–∞–Ω–µ–ª—å —Ä–µ–Ω–¥–µ—Ä–∏—Ç—Å—è —Å "(collapsed)" —Ç–µ–∫—Å—Ç–æ–º
      expect(screen.getByText('üîß Sticky Debug (collapsed)')).toBeInTheDocument();

      // –¢–∞–±—ã –Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–∏–¥–Ω—ã
      expect(screen.queryByText('events')).not.toBeInTheDocument();
    });

    test('–¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ', () => {
      render(
        <TestWrapper>
          <DebugPanel />
        </TestWrapper>
      );

      const autoRefreshButton = screen.getByTitle('–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ');

      // –ö–ª–∏–∫–∞–µ–º —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      fireEvent.click(autoRefreshButton);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–µ–∫—Å—Ç –∏–∑–º–µ–Ω–∏–ª—Å—è
      expect(screen.getByTitle('–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ')).toBeInTheDocument();

      // –ö–ª–∏–∫–∞–µ–º —Å–Ω–æ–≤–∞ —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å
      fireEvent.click(screen.getByTitle('–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ'));

      // –î–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
      expect(screen.getByTitle('–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ')).toBeInTheDocument();
    });
  });

  describe('–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ –æ–ø—Ü–∏–∏', () => {
    test('–¥–æ–ª–∂–µ–Ω —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏—é –ø–∞–Ω–µ–ª–∏', () => {
      const { container } = render(
        <TestWrapper>
          <DebugPanel position="bottom-left" />
        </TestWrapper>
      );

      const panel = container.querySelector('.sticky-debug-panel');
      expect(panel || container.firstChild).toBeInTheDocument();
    });

    test('–¥–æ–ª–∂–µ–Ω –ø—Ä–∏–º–µ–Ω—è—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–π className', () => {
      const { container } = render(
        <TestWrapper>
          <DebugPanel className="custom-debug-panel" />
        </TestWrapper>
      );

      const panel = container.firstChild;
      expect(panel).toHaveClass('custom-debug-panel');
      expect(panel).toHaveClass('sticky-debug-panel');
    });

    test('–¥–æ–ª–∂–µ–Ω —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è', () => {
      jest.useFakeTimers();

      render(
        <TestWrapper>
          <DebugPanel autoRefreshInterval={2000} />
        </TestWrapper>
      );

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–∞–Ω–µ–ª—å —Ä–µ–Ω–¥–µ—Ä–∏—Ç—Å—è —Å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
      expect(screen.getByText('üîß Sticky Debug')).toBeInTheDocument();
      expect(screen.getByTitle('–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ')).toBeInTheDocument();

      jest.useRealTimers();
    });

    test('–¥–æ–ª–∂–µ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Ä–∞–∑–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏', () => {
      const positions = ['top-right', 'top-left', 'bottom-right', 'bottom-left'] as const;

      positions.forEach(position => {
        const { unmount } = render(
          <TestWrapper>
            <DebugPanel position={position} />
          </TestWrapper>
        );

        expect(screen.getByText('üîß Sticky Debug')).toBeInTheDocument();

        unmount();
      });
    });
  });

  describe('—Ä–∞–±–æ—Ç–∞ —Å —Ç–∞–±–∞–º–∏', () => {
    test('–¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å —Ç–∞–±—ã', () => {
      render(
        <TestWrapper>
          <DebugPanel />
        </TestWrapper>
      );

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —Ç–∞–±—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
      const eventsTab = screen.getByText('events');
      const performanceTab = screen.getByText('performance');
      const snapshotsTab = screen.getByText('snapshots');

      expect(eventsTab).toBeInTheDocument();
      expect(performanceTab).toBeInTheDocument();
      expect(snapshotsTab).toBeInTheDocument();

      // –ö–ª–∏–∫–∞–µ–º –ø–æ —Ç–∞–±–∞–º
      fireEvent.click(performanceTab);
      fireEvent.click(snapshotsTab);
      fireEvent.click(eventsTab);

      // –í—Å–µ —Ç–∞–±—ã –¥–æ–ª–∂–Ω—ã –æ—Å—Ç–∞—Ç—å—Å—è –≤–∏–¥–∏–º—ã–º–∏
      expect(eventsTab).toBeInTheDocument();
      expect(performanceTab).toBeInTheDocument();
      expect(snapshotsTab).toBeInTheDocument();
    });

    test('–¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫', () => {
      render(
        <TestWrapper>
          <DebugPanel />
        </TestWrapper>
      );

      // –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 4 –∫–Ω–æ–ø–∫–∏: –ø–∞—É–∑–∞ + 3 —Ç–∞–±–∞
      const buttons = screen.getAllByRole('button');
      expect(buttons).toHaveLength(4);
    });

    test('–¥–æ–ª–∂–µ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–∞–±–∞ events', () => {
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è –≤ –º–æ–∫ debugger
      const mockEvents = [
        {
          id: 'event-1',
          type: 'info',
          elementId: 'test-element',
          timestamp: Date.now(),
          data: { message: 'Test event' }
        },
        {
          id: 'event-2',
          type: 'error',
          elementId: 'test-element-2',
          timestamp: Date.now(),
          data: { message: 'Error event' }
        }
      ];

      (stickyDebugger.filteredEvents as any) = mockEvents;

      render(
        <TestWrapper>
          <DebugPanel />
        </TestWrapper>
      );

      // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∞–∫—Ç–∏–≤–µ–Ω events —Ç–∞–±
      expect(screen.getByText('–ü–æ—Å–ª–µ–¥–Ω–∏–µ 2 —Å–æ–±—ã—Ç–∏–π:')).toBeInTheDocument();
      expect(screen.getByText('‚ÑπÔ∏è test-element')).toBeInTheDocument();
      expect(screen.getByText('‚ùå test-element-2')).toBeInTheDocument();
    });

    test('–¥–æ–ª–∂–µ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–∞–±–∞ performance', () => {
      render(
        <TestWrapper>
          <DebugPanel />
        </TestWrapper>
      );

      // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ performance —Ç–∞–±
      fireEvent.click(screen.getByText('performance'));

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–∞–Ω–Ω—ã—Ö
      expect(screen.getByText('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏')).toBeInTheDocument();
    });

    test('–¥–æ–ª–∂–µ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–∞–±–∞ snapshots', () => {
      render(
        <TestWrapper>
          <DebugPanel />
        </TestWrapper>
      );

      // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ snapshots —Ç–∞–±
      fireEvent.click(screen.getByText('snapshots'));

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–Ω–∏–º–∫–∞
      expect(screen.getByText('üì∏ –°–æ–∑–¥–∞—Ç—å')).toBeInTheDocument();
      expect(screen.getByText('–°–Ω–∏–º–∫–æ–≤: 0')).toBeInTheDocument();
      expect(screen.getByText('–ù–µ—Ç —Å–Ω–∏–º–∫–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è')).toBeInTheDocument();
    });

    test('–¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–Ω–∏–º–∫–∏', () => {
      render(
        <TestWrapper>
          <DebugPanel />
        </TestWrapper>
      );

      // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ snapshots —Ç–∞–±
      fireEvent.click(screen.getByText('snapshots'));

      // –°–æ–∑–¥–∞–µ–º —Å–Ω–∏–º–æ–∫
      const createButton = screen.getByText('üì∏ –°–æ–∑–¥–∞—Ç—å');
      fireEvent.click(createButton);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–Ω–∏–º–æ–∫ —Å–æ–∑–¥–∞–ª—Å—è
      waitFor(() => {
        expect(screen.getByText('–°–Ω–∏–º–∫–æ–≤: 1')).toBeInTheDocument();
      });
    });
  });

  describe('–æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö', () => {
    test('–¥–æ–ª–∂–µ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Å–æ–±—ã—Ç–∏—è —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏', () => {
      const eventTypes = [
        { type: 'error', icon: '‚ùå' },
        { type: 'warning', icon: '‚ö†Ô∏è' },
        { type: 'info', icon: '‚ÑπÔ∏è' },
        { type: 'debug', icon: 'üîç' },
        { type: 'state-change', icon: 'üîÑ' },
        { type: 'config-update', icon: '‚öôÔ∏è' },
        { type: 'registration', icon: 'üìù' },
        { type: 'unregistration', icon: 'üóëÔ∏è' }
      ];

      eventTypes.forEach(({ type, icon }) => {
        // –û—á–∏—â–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
        (stickyDebugger.filteredEvents as any) = [{
          id: `event-${type}`,
          type: type as any,
          elementId: `test-${type}`,
          timestamp: Date.now(),
          data: { message: `${type} message` }
        }];

        const { unmount } = render(
          <TestWrapper>
            <DebugPanel />
          </TestWrapper>
        );

        expect(screen.getByText(`${icon} test-${type}`)).toBeInTheDocument();
        expect(screen.getByText(`${type} message`)).toBeInTheDocument();

        // –û—á–∏—â–∞–µ–º –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ—Å—Ç–∞
        unmount();
      });

      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è
      (stickyDebugger.filteredEvents as any) = [{
        id: 'event-unknown',
        type: 'info' as any,
        elementId: 'test-unknown',
        timestamp: Date.now(),
        data: { message: 'unknown message' }
      }];

      render(
        <TestWrapper>
          <DebugPanel />
        </TestWrapper>
      );

      expect(screen.getByText('‚ÑπÔ∏è test-unknown')).toBeInTheDocument();
    });

    test('–¥–æ–ª–∂–µ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å –¥–∞–Ω–Ω—ã–º–∏', () => {
      // –ú–æ–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      const mockAnalysis = {
        summary: {
          totalElements: 5,
          avgRenderTime: 15.5,
          maxRenderTime: 45.2,
          totalRecomputations: 10,
          slowElementsCount: 2,
          activeElementsCount: 3
        },
        slowElements: [
          { id: 'slow-element-1', renderTime: 45.2, recomputations: 5 },
          { id: 'slow-element-2', renderTime: 32.1, recomputations: 3 }
        ],
        recommendations: [
          '–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ slow-element-1',
          '–£–º–µ–Ω—å—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ DOM –æ–ø–µ—Ä–∞—Ü–∏–π'
        ]
      };

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫
      (stickyDebugger as any).performanceAnalysis = mockAnalysis;

      render(
        <TestWrapper>
          <DebugPanel />
        </TestWrapper>
      );

      // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ performance —Ç–∞–±
      fireEvent.click(screen.getByText('performance'));

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
      expect(screen.getByText('üìä –°–≤–æ–¥–∫–∞:')).toBeInTheDocument();
      expect(screen.getByText('–≠–ª–µ–º–µ–Ω—Ç–æ–≤: 5')).toBeInTheDocument();
      expect(screen.getByText('–°—Ä–µ–¥–Ω–∏–π —Ä–µ–Ω–¥–µ—Ä: 15.5–º—Å')).toBeInTheDocument();
      expect(screen.getByText('–ú–∞–∫—Å —Ä–µ–Ω–¥–µ—Ä: 45.2–º—Å')).toBeInTheDocument();
      expect(screen.getByText('–ú–µ–¥–ª–µ–Ω–Ω—ã—Ö: 2')).toBeInTheDocument();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∏—Å–æ–∫ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
      expect(screen.getByText('üêå –ú–µ–¥–ª–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã:')).toBeInTheDocument();
      expect(screen.getByText('slow-element-1: 45.20–º—Å')).toBeInTheDocument();
      expect(screen.getByText('slow-element-2: 32.10–º—Å')).toBeInTheDocument();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
      expect(screen.getByText('üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:')).toBeInTheDocument();
      expect(screen.getByText('‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ slow-element-1')).toBeInTheDocument();
      expect(screen.getByText('‚Ä¢ –£–º–µ–Ω—å—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ DOM –æ–ø–µ—Ä–∞—Ü–∏–π')).toBeInTheDocument();
    });

    test('–¥–æ–ª–∂–µ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Å–Ω–∏–º–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏', () => {
      // –°–æ–∑–¥–∞–µ–º –º–æ–∫ —Å–Ω–∏–º–∫–∏
      const mockSnapshots = [
        {
          timestamp: Date.now() - 1000,
          elements: { 'element-1': {}, 'element-2': {} },
          groups: {},
          viewport: { width: 1920, height: 1080, scrollX: 0, scrollY: 0 },
          performance: []
        },
        {
          timestamp: Date.now(),
          elements: { 'element-1': {}, 'element-2': {}, 'element-3': {} },
          groups: {},
          viewport: { width: 1024, height: 768, scrollX: 0, scrollY: 0 },
          performance: []
        }
      ];

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫
      (stickyDebugger.allSnapshots as any) = mockSnapshots;

      render(
        <TestWrapper>
          <DebugPanel />
        </TestWrapper>
      );

      // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ snapshots —Ç–∞–±
      fireEvent.click(screen.getByText('snapshots'));

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
      expect(screen.getByText('–°–Ω–∏–º–∫–æ–≤: 2')).toBeInTheDocument();
      expect(screen.getByText('üì∏ –°–Ω–∏–º–æ–∫ #2')).toBeInTheDocument();
      expect(screen.getByText('üì∏ –°–Ω–∏–º–æ–∫ #1')).toBeInTheDocument();
      expect(screen.getByText('Elements: 3 | Viewport: 1024x768')).toBeInTheDocument();
      expect(screen.getByText('Elements: 2 | Viewport: 1920x1080')).toBeInTheDocument();
    });
  });

  describe('–∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ', () => {
    test('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º', () => {
      jest.useFakeTimers();
      const setIntervalSpy = jest.spyOn(global, 'setInterval');

      render(
        <TestWrapper>
          <DebugPanel autoRefreshInterval={1000} />
        </TestWrapper>
      );

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–∞–π–º–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
      expect(setIntervalSpy).toHaveBeenCalledWith(expect.any(Function), 1000);

      // –ü—Ä–æ–¥–≤–∏–≥–∞–µ–º –≤—Ä–µ–º—è
      act(() => {
        jest.advanceTimersByTime(1000);
      });

      setIntervalSpy.mockRestore();
      jest.useRealTimers();
    });

    test('–¥–æ–ª–∂–µ–Ω –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –æ—Ç–∫–ª—é—á–µ–Ω–æ', () => {
      jest.useFakeTimers();
      const clearIntervalSpy = jest.spyOn(global, 'clearInterval');

      render(
        <TestWrapper>
          <DebugPanel />
        </TestWrapper>
      );

      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      const autoRefreshButton = screen.getByTitle('–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ');
      fireEvent.click(autoRefreshButton);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–∞–π–º–µ—Ä –æ—á–∏—â–µ–Ω
      expect(clearIntervalSpy).toHaveBeenCalled();

      clearIntervalSpy.mockRestore();
      jest.useRealTimers();
    });
  });

  describe('–æ–±—Ä–∞–±–æ—Ç–∫–∞ edge cases', () => {
    test('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', () => {
      // –ú–æ–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ (—É–∂–µ –µ—Å—Ç—å –≤ beforeEach)
      render(
        <TestWrapper>
          <DebugPanel />
        </TestWrapper>
      );

      // Events —Ç–∞–±
      expect(screen.getByText('–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è')).toBeInTheDocument();

      // Snapshots —Ç–∞–±
      fireEvent.click(screen.getByText('snapshots'));
      expect(screen.getByText('–ù–µ—Ç —Å–Ω–∏–º–∫–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è')).toBeInTheDocument();
    });

    test('–¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Å–æ–±—ã—Ç–∏—è —Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏', () => {
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      (stickyDebugger.filteredEvents as any) = [{
        id: 'test-id',
        elementId: 'test-element',
        type: 'info',
        timestamp: Date.now(),
        data: {}
      }];

      render(
        <TestWrapper>
          <DebugPanel />
        </TestWrapper>
      );

      expect(screen.getByText('‚ÑπÔ∏è test-element')).toBeInTheDocument();
    });

    test('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö –≤ summary', () => {
      // –ú–æ–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å null summary (—É–∂–µ –µ—Å—Ç—å –≤ beforeEach)
      render(
        <TestWrapper>
          <DebugPanel />
        </TestWrapper>
      );

      // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ performance —Ç–∞–±
      fireEvent.click(screen.getByText('performance'));

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      expect(screen.getByText('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏')).toBeInTheDocument();
    });

    test('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏', () => {
      (stickyDebugger.filteredEvents as any) = [{
        id: 'test-minimal',
        type: 'info',
        elementId: 'test-minimal',
        timestamp: Date.now(),
        data: { message: 'Minimal event' }
      }];

      render(
        <TestWrapper>
          <DebugPanel />
        </TestWrapper>
      );

      expect(screen.getByText('‚ÑπÔ∏è test-minimal')).toBeInTheDocument();
      expect(screen.getByText('Minimal event')).toBeInTheDocument();
    });

    test('–¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏–π', () => {
      const currentTime = Date.now();

      // –ú–æ–∫–∞–µ–º —Å–æ–±—ã—Ç–∏–µ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
      (stickyDebugger.filteredEvents as any) = [{
        id: 'test-time',
        elementId: 'test-element-time',
        type: 'info',
        timestamp: currentTime,
        data: { message: 'Time test event' }
      }];

      render(
        <TestWrapper>
          <DebugPanel />
        </TestWrapper>
      );

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Ä–µ–º—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è
      const timeString = new Date(currentTime).toLocaleTimeString();
      expect(screen.getByText(timeString)).toBeInTheDocument();
    });
  });
});
