/**
 * Unit —Ç–µ—Å—Ç—ã –¥–ª—è DebugPanel –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
 */

import React from 'react';
import { render, screen, fireEvent, waitFor, act } from '@testing-library/react';

import { DebugPanel } from '../../components/DebugPanel';
import { StickyProvider } from '../../context/StickyContext';
import { stickyDebugger } from '../../debug/StickyDebugger';
import { ENV } from '../../utils/env';

// –ú–æ–∫–∞–µ–º ENV –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è production —Ä–µ–∂–∏–º–∞
jest.mock('../../utils/env', () => ({
  ENV: {
    isProduction: false,
    isDev: true,
    isTest: true,
    isBrowser: true,
    enableDebug: true,
    enablePerformanceTracking: true
  }
}));

// –û–±–µ—Ä—Ç–∫–∞ —Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º
const TestWrapper: React.FC<{ children: React.ReactNode }> = ({ children }) => (
  <StickyProvider>{children}</StickyProvider>
);

describe('DebugPanel', () => {
  test('–¥–æ–ª–∂–µ–Ω —Ä–µ–Ω–¥–µ—Ä–∏—Ç—å debug panel', () => {
    render(
      <TestWrapper>
        <DebugPanel />
      </TestWrapper>
    );

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ debug –ø–∞–Ω–µ–ª–∏
    expect(screen.getByText('üîß Sticky Debug')).toBeInTheDocument();
    expect(screen.getByText('events')).toBeInTheDocument();
    expect(screen.getByText('performance')).toBeInTheDocument();
    expect(screen.getByText('snapshots')).toBeInTheDocument();
  });

  test('–¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ sticky —ç–ª–µ–º–µ–Ω—Ç–∞—Ö', () => {
    render(
      <TestWrapper>
        <DebugPanel />
      </TestWrapper>
    );

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ debug –ø–∞–Ω–µ–ª–∏
    expect(screen.getByText('üîß Sticky Debug')).toBeInTheDocument();
    expect(screen.getByText('–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è')).toBeInTheDocument();
  });

  test('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å toggle –ø–æ–∫–∞–∑–∞ –ø–∞–Ω–µ–ª–∏', () => {
    render(
      <TestWrapper>
        <DebugPanel />
      </TestWrapper>
    );

    // –ù–∞—Ö–æ–¥–∏–º –∫–Ω–æ–ø–∫—É –ø–∞—É–∑—ã –ø–æ title
    const pauseButton = screen.getByTitle('–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ');
    expect(pauseButton).toBeInTheDocument();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç –∫–ª–∏–∫–∞–±–µ–ª–µ–Ω
    fireEvent.click(pauseButton);

    // –ö–Ω–æ–ø–∫–∞ –¥–æ–ª–∂–Ω–∞ –æ—Å—Ç–∞—Ç—å—Å—è –≤–∏–¥–∏–º–æ–π
    expect(pauseButton).toBeInTheDocument();
  });

  test('–¥–æ–ª–∂–µ–Ω —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏—é –ø–∞–Ω–µ–ª–∏', () => {
    const { container } = render(
      <TestWrapper>
        <DebugPanel position="bottom-left" />
      </TestWrapper>
    );

    const panel = container.querySelector('.debug-panel');
    expect(panel || container.firstChild).toBeInTheDocument();
  });

  test('–¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Å–≤–µ—Ä–Ω—É—Ç–æ–º —Ä–µ–∂–∏–º–µ', () => {
    render(
      <TestWrapper>
        <DebugPanel collapsed />
      </TestWrapper>
    );

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–∞–Ω–µ–ª—å –≤—Å–µ –µ—â–µ —Ä–µ–Ω–¥–µ—Ä–∏—Ç—Å—è —Å "(collapsed)" —Ç–µ–∫—Å—Ç–æ–º
    expect(screen.getByText('üîß Sticky Debug (collapsed)')).toBeInTheDocument();
  });

  test('–¥–æ–ª–∂–µ–Ω –ø—Ä–∏–º–µ–Ω—è—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–π className', () => {
    const { container } = render(
      <TestWrapper>
        <DebugPanel className="custom-debug-panel" />
      </TestWrapper>
    );

    const panel = container.firstChild;
    expect(panel).toHaveClass('custom-debug-panel');
  });

  test('–¥–æ–ª–∂–µ–Ω —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è', () => {
    render(
      <TestWrapper>
        <DebugPanel autoRefreshInterval={2000} />
      </TestWrapper>
    );

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–∞–Ω–µ–ª—å —Ä–µ–Ω–¥–µ—Ä–∏—Ç—Å—è —Å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
    expect(screen.getByText('üîß Sticky Debug')).toBeInTheDocument();
    expect(screen.getByTitle('–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ')).toBeInTheDocument();
  });

  test('–¥–æ–ª–∂–µ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Ä–∞–∑–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏', () => {
    const positions = ['top-right', 'top-left', 'bottom-right', 'bottom-left'] as const;

    positions.forEach(position => {
      const { unmount } = render(
        <TestWrapper>
          <DebugPanel position={position} />
        </TestWrapper>
      );

      expect(screen.getByText('üîß Sticky Debug')).toBeInTheDocument();

      unmount();
    });
  });

  test('–¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å —Ç–∞–±—ã', () => {
    render(
      <TestWrapper>
        <DebugPanel />
      </TestWrapper>
    );

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —Ç–∞–±—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
    const eventsTab = screen.getByText('events');
    const performanceTab = screen.getByText('performance');
    const snapshotsTab = screen.getByText('snapshots');

    expect(eventsTab).toBeInTheDocument();
    expect(performanceTab).toBeInTheDocument();
    expect(snapshotsTab).toBeInTheDocument();

    // –ö–ª–∏–∫–∞–µ–º –ø–æ —Ç–∞–±–∞–º
    fireEvent.click(performanceTab);
    fireEvent.click(snapshotsTab);
    fireEvent.click(eventsTab);

    // –í—Å–µ —Ç–∞–±—ã –¥–æ–ª–∂–Ω—ã –æ—Å—Ç–∞—Ç—å—Å—è –≤–∏–¥–∏–º—ã–º–∏
    expect(eventsTab).toBeInTheDocument();
    expect(performanceTab).toBeInTheDocument();
    expect(snapshotsTab).toBeInTheDocument();
  });

  test('–¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫', () => {
    render(
      <TestWrapper>
        <DebugPanel />
      </TestWrapper>
    );

    // –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 4 –∫–Ω–æ–ø–∫–∏: –ø–∞—É–∑–∞ + 3 —Ç–∞–±–∞
    const buttons = screen.getAllByRole('button');
    expect(buttons).toHaveLength(4);
  });
});
